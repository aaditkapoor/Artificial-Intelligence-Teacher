from django.shortcuts import render_to_response
from .models import DataModel, AssignmentID
from signup.models import UserModel
from django.http import HttpResponse, HttpResponseRedirect
from . import schedule_assignment_generation as creator
import random
from django.core.mail import EmailMessage, send_mail
import threading
from pdfdocument.document import PDFDocument



def automatic_generation(request):
	return HttpResponse("working on it..... (Coming soon")

def exit_session(request):
	if request.session.get("name_been_put") and request.session.get("username") is not None and request.session.get("email") is not None:
		request.session['name_been_put'] = False
		request.session['username'] = None
		request.session['email'] = None

		if request.session.get("username") == "guest":
			DataModel.objects.filter(username="guest").delete()

		return render_to_response("get_info.html")
	else:
		return render_to_response("get_info.html")


def create_assignment_pdf(name,assignments):
	pdf = PDFDocument(name)
	pdf.init_report()
	addr={"first_name":"A.I.T","last_name":"(c) A.I.T 2016"}
	pdf.h1("Generated by A.I.T (Your A.I Tutor)\n")
	pdf.h2("Your Assignment (Please solve this)\n")
	counter = 1
	for i in assignments:
		pdf.p("Q"+str(counter)+ ": " + i + "\n")
		counter+=1

	pdf.generate()


def send_mails(request):
	if len(DataModel.objects.all()) > 1:
		for i in UserModel.objects.all():
			print "Sent for user %s with email %s" % (i.username,i.email)
			create_assignments_and_send(request, i.username, i.email)
		return HttpResponseRedirect("/")
	else:
		return HttpResponse("not added enough data to process")



def eval_command(request):
	query = request.GET.get("query","")
	if query and request.session.get("username") is not None and request.session.get("email") is not None:
		if query == "show":
			create_assignments_and_send(request,request.session.get("username"),request.session.get("email"))
			return HttpResponseRedirect("/")


def home_main(request):
	if request.session.get("name_been_put") and request.session.get("username") and request.session.get("email"):
		username=request.session.get("username")
		email = request.session.get("email")
		message = request.session.get("success","")
		if message == "True":
			message = "Installed the pack."
		return render_to_response("home.html",{"username":username,"email":email,"given":True,"message":message})
	else:
		return render_to_response("get_info.html")

def login_get_info(request):
	return render_to_response("get_login_info.html")



def get_info(request):
	return render_to_response("get_info.html")

def feed(request):
	print request.session.get("name_been_put")
	return render_to_response("feed.html")


def add_data(request):
	question = request.GET.get("question","")
	answer = request.GET.get("answer","")

	if request.session.get("username"):
		if question and answer:
			username = request.session.get("username")
			DataModel.objects.create(username=username, question=question, answer=answer)
			return HttpResponseRedirect("/feed/")
		else:
			return HttpResponse("error")
	else:
		return render_to_response("get_info.html")




#Working
def generate_html_from_assignments(assignments):
	html = "<ul>"
	for i in assignments:
		html+="<li>"+i

	html+="</ul>"

	return html




def send_mail_to_user(email, assignments,username):
	e = EmailMessage("Your Assignment is ready! (Generated by A.I.T):","Your assignment is attached below! (AUTOMATIC GENERATION)",to=[email])
	e.attach_file(username+".pdf")
	e.send()

def create_assignments_and_send(request,username,email):
	if request.session.get("username"):
		assignments = creator.gather_data(username)
		create_assignment_pdf(username+".pdf",assignments)
		id = random.randint(1,100)
		AssignmentID.objects.create(assignmentId = id)
		send_mail_to_user(email,assignments,username)


def view_data(request):
	if request.session.get("username") and request.session.get("name_been_put"):
		data = DataModel.objects.filter(username=request.session.get("username"))
		return render_to_response("view.html",{"data":data})